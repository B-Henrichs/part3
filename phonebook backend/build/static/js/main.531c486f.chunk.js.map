{"version":3,"sources":["components/Form.js","components/Person.js","components/Search.js","components/People.js","services/phoneBook.js","components/Notification.js","components/Error.js","App.js","index.js"],"names":["Form","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Person","person","removeEntry","name","number","onClick","id","Search","props","newSearch","handleSearchChange","People","personsToShow","map","baseUrl","services","getAll","axios","get","then","response","data","create","newObject","post","update","put","request","delete","console","log","notificationStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","Notification","message","style","className","errorNotification","App","useState","persons","setPersons","setNewName","setNewNumber","setNewSearch","alertMessage","setAlertMessage","errorMessage","setErrorMessage","useEffect","phoneService","initialBook","catch","error","setTimeout","filter","toLowerCase","includes","Error","event","target","preventDefault","item","toLocaleLowerCase","length","confirm","window","personToUpdate","find","updatedPerson","n","updatePerson","personObject","returnedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.531c486f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = ({addPerson, newName, handleNameChange, newNumber, handleNumberChange}) => {\r\n  return (\r\n  <form onSubmit ={addPerson}>\r\n    <div>\r\n      name: <input \r\n        value={newName} \r\n        onChange={handleNameChange}/>\r\n    </div>\r\n    <div>\r\n        number:<input \r\n        value={newNumber}\r\n        onChange={handleNumberChange}/>\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">update phonebook</button>\r\n    </div>\r\n  </form>\r\n    \r\n  )\r\n}\r\nexport default Form","import React from 'react'\r\nconst Person = ({ person, removeEntry }) => {\r\n  return (\r\n    <li>{person.name} {person.number} <button onClick={removeEntry} value={person.id}>Delete</button> </li>\r\n  )\r\n}\r\nexport default Person","import React from 'react'\r\nconst Search = (props) => { \r\n    return(\r\n        <div>\r\n        search:<input value={props.newSearch} onChange={props.handleSearchChange} />\r\n        </div>\r\n            )\r\n        }\r\nexport default Search","import React from 'react'\r\n\r\nconst People = ({Person, personsToShow, removeEntry}) => {  \r\n    //returns layout and uses map method on array returned with search filter(if any)\r\n    //map function takes intrustions from Person component\r\n    return(  \r\n        <div>\r\n            <h2>Numbers</h2>        \r\n                <ul>\r\n                    {personsToShow.map(person =>\r\n                        <Person key={person.name} person={person} removeEntry={removeEntry}/>    \r\n                        )}\r\n                </ul>\r\n      </div>\r\n)}\r\nexport default People","import axios from 'axios'\r\n\r\n//sets location to pull from\r\nconst baseUrl = '/api/persons'\r\n\r\n//first pass sets base phonebook from json server\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)  \r\n}\r\n\r\n//adding an entry\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n//changing a number of an existing entry\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n//deletes entry\r\nconst removeEntry = (person) =>{\r\n  const request =axios.delete(`${baseUrl}/${person}`)\r\n    return( \r\n      console.log(\"persons is\",person),\r\n      request)\r\n    .then(response => response.data)\r\n  }\r\n\r\nconst services = {\r\n  getAll, create, update, removeEntry\r\n}\r\n\r\nexport default services","import React from 'react'\r\n\r\nconst notificationStyle = {\r\ncolor: 'green',\r\n  background: 'lightgrey',\r\n  fontSize: 20,\r\n  borderStyle: 'solid',\r\n  borderRadius: 5,\r\n  padding: 10,\r\n  marginBottom: 10,\r\n}\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div style={notificationStyle} className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import React from 'react'\r\n\r\nconst notificationStyle = {\r\ncolor: 'red',\r\n  background: 'lightgrey',\r\n  fontSize: 20,\r\n  borderStyle: 'solid',\r\n  borderRadius: 5,\r\n  padding: 10,\r\n  marginBottom: 10,\r\n}\r\n\r\nconst errorNotification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div style={notificationStyle} className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default errorNotification","//import react + components\r\nimport React, { useState, useEffect } from 'react'\r\nimport Form from './components/Form'\r\nimport Person from './components/Person'\r\nimport Search from './components/Search'\r\nimport People from './components/People'\r\nimport phoneService from './services/phoneBook'\r\nimport Notification from './components/Notification'\r\nimport Error from './components/Error'\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  //establishes states\r\n  const [ persons, setPersons ] = useState([]) \r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ newSearch, setNewSearch] = useState('')\r\n  const [alertMessage, setAlertMessage] = useState(null)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  //use axios to get import db.json file requires json server to be run\r\n  useEffect(() => {\r\n   phoneService\r\n      .getAll()\r\n      .then(initialBook => {\r\n        setPersons(initialBook)     \r\n  }).catch(error =>{\r\n    setErrorMessage(\r\n      `unable to connect to server`\r\n    )\r\n    setTimeout(() => {\r\n      setErrorMessage(null)\r\n    }, 5000)\r\n  })\r\n  }, [])\r\n \r\n\r\n\r\n//handles button click when the name field is a new value\r\n  const addPerson = () => {\r\n    \r\n    // person generated from name field and number field\r\n    const personObject = {\r\n      name: newName,\r\n      number: newNumber,  \r\n    }\r\n   \r\n      //use axios to add person to to persons state array\r\n       phoneService\r\n      .create(personObject)\r\n      .then( returnedPerson => {\r\n        setAlertMessage(\r\n          `Added ${returnedPerson.name} to the server`\r\n        )\r\n        setTimeout(() => {\r\n          setAlertMessage(null)\r\n        }, 5000)\r\n        setPersons(persons.concat(returnedPerson))\r\n        setNewName('')\r\n        setNewNumber('') \r\n    })\r\n    .catch(error => {\r\n      console.log(\"error:\",error.response.data.error)\r\n      setErrorMessage(\r\n        error.response.data.error||`unable to connect to server`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    })\r\n    \r\n  }\r\n\r\n\r\n//handles button click when name field is an existing value\r\n  const updatePerson = () => {\r\n\r\n    // asks user if this is what they ment to do\r\n    const confirm = window.confirm(\r\n      `${newName} is already added to phonebook, replace the old phone number with new one.`\r\n    );\r\n\r\n    // uses find method on persons array to match change with existing entry \r\n    const personToUpdate = persons.find((item) => item.name === newName)\r\n    ;\r\n    //uses copy method to return a new object with old name and new number\r\n    const updatedPerson = { ...personToUpdate, number: newNumber };\r\n\r\n    //only executes if user selects \"ok\" in prompt window\r\n    if (confirm) {\r\n\r\n      //axios put method to update the server\r\n      phoneService\r\n        .update(updatedPerson.id, updatedPerson)\r\n        .then((response) => {\r\n          setAlertMessage(\r\n            `Updated ${updatedPerson.name}'s entry`\r\n          )\r\n          setTimeout(() => {\r\n            setAlertMessage(null)\r\n          }, 5000)\r\n\r\n          //takes response from json server and alters state array, returns identical\r\n          //object if id does not match. if the id does match alter object to be response\r\n          setPersons(persons.map((item) => (item.id === response.id ? response : item)))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `'${updatedPerson.name}' was removed by another user`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setPersons(persons.filter(n => n.id !== updatedPerson.id))     \r\n      })\r\n      }\r\n  }\r\n\r\n//handles delete button click\r\nconst removeEntry = (event) => {\r\n  event.preventDefault()\r\n const id = event.target.value\r\n //when called promts user\r\n const confirm = window.confirm(\"are you sure?\")\r\n // finds the person to update\r\n const personToUpdate = persons.find((item) => item.id === id)\r\n\r\n //check to see if the user confirms in the prompt window\r\n if (confirm){\r\n\r\n  //calls axios delete method to remove the person from the json database\r\n  phoneService\r\n    .removeEntry(personToUpdate.id)\r\n    .then( response => {\r\n      console.log(personToUpdate.name)\r\n      setAlertMessage(\r\n        `Deleted ${personToUpdate.name}'s entry`\r\n      )\r\n      setTimeout(() => {\r\n        setAlertMessage(null)\r\n      }, 5000)\r\n\r\n      //uses filter method on persons state array to return a new array without the removed entry\r\n      setPersons(persons.filter(n => n.id !== id))\r\n    })\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `'${persons[id-1].name}' was removed by another user`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setPersons(persons.filter(n => n.id !== persons[id-1].id))     \r\n    })\r\n}}\r\n\r\n\r\n  //decides which function to call when the button is pressed \r\n  //depending on if the name is a new value or not\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // uses filter method on persons array and creates a new array of names\r\n    //match the name field.\r\n    const isNameExist = persons.filter(\r\n      (item) => item.name.toLocaleLowerCase() === newName.toLowerCase()\r\n    ).length;\r\n\r\n      //if the isNameExist array is empty then the name field\r\n      //does not match any existing values, add the person \r\n    if (!isNameExist) {\r\n      addPerson();\r\n\r\n      //otherwise update the entry\r\n    } else {\r\n      updatePerson();\r\n    }\r\n\r\n    //reset the name and number field\r\n        setNewName('')\r\n        setNewNumber('')\r\n  };\r\n\r\n\r\n    \r\n    \r\n    \r\n  \r\n  //these change the fields when user types\r\n  const handleNameChange = (event) => {\r\n   setNewName(event.target.value)\r\n  }\r\n  const handleNumberChange = (event) => {\r\n  setNewNumber(event.target.value)\r\n  }\r\n  const handleSearchChange = (event) => {\r\n  setNewSearch(event.target.value)\r\n  }\r\n\r\n\r\n  \r\n  //filters the person array to only display entrys that match the search field\r\n  const personsToShow =  persons.filter(person => person.name.toLowerCase().includes(newSearch) === true)\r\n    \r\n  \r\n  return (\r\n\r\n      //layout and call components\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <Error message= {errorMessage}/>\r\n      <Notification message={alertMessage} />\r\n      \r\n      <h3>Search</h3>\r\n      <Search newSearch={newSearch} handleSearchChange={handleSearchChange} />\r\n      <h3>Update Phonebook</h3>\r\n      <Form addPerson={handleFormSubmit} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange}/>\r\n      <People personsToShow={personsToShow} Person={Person} removeEntry={removeEntry}/>\r\n     \r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n"],"sourceRoot":""}